{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\19496\\\\FlyrProject\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\";\n// this is the code for creating a \"memory\"/form on the website\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport FileBase from 'react-file-base64';\nimport useStyles from './styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { Clear } from '@material-ui/icons'; // on individual posts, we need to get the current id\n// becuase when we press the \"...\" spread icon is the edit button\n// we need to pass over the id of that post to our form component\n// that way we can go from \"Creating a memory\" to \"Editing a memory\"\n// for the selected post that is identified by its id.\n\nconst Form = _ref => {\n  var _user$result3;\n\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  const [postData, setPostData] = useState({\n    // creator/wtv: '' means it's an empty string\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem('profile')); // we run this function when the post gets updated from nothing to a post\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]); // once the user press submit, we want to send a post request with all the user's data\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, \"Please Sign In to start your experience in Flyr!!!\"));\n  }\n\n  return (\n    /*#__PURE__*/\n    // paper is a white background\n    // VALUE here means that the whole data from the poast is gonna be stored in the postData object\n    // and value is gonna equal to postData.creator\n    // onChange allows us to set each of the different textfields without overriding once another\n    // this means setting fields every time but the last property is changed so\n    // all the textfield will be fulfilled\n    React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, currentId ? 'Editing' : 'Creating', \" a Memory\"), /*#__PURE__*/React.createElement(TextField, {\n      name: \"title\",\n      variant: \"outlined\",\n      label: \"Title\",\n      fullWidth: true,\n      value: postData.title,\n      onChange: e => setPostData({ ...postData,\n        title: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"message\",\n      variant: \"outlined\",\n      label: \"Message\",\n      fullWidth: true,\n      value: postData.message,\n      onChange: e => setPostData({ ...postData,\n        message: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"tags\",\n      variant: \"outlined\",\n      label: \"Tags\",\n      fullWidth: true,\n      value: postData.tags,\n      onChange: e => setPostData({ ...postData,\n        tags: e.target.value.split(',')\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.fileInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FileBase, {\n      type: \"file\",\n      multiple: false,\n      onDone: _ref2 => {\n        let {\n          base64\n        } = _ref2;\n        return setPostData({ ...postData,\n          selectedFile: base64\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 52\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: classes.buttonSubmit,\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      type: \"submit\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      size: \"small\",\n      onClick: clear,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"Clear\")))\n  );\n};\n\nexport default Form;","map":{"version":3,"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useStyles","useDispatch","useSelector","createPost","updatePost","Clear","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","classes","dispatch","user","JSON","parse","localStorage","getItem","handleSubmit","e","preventDefault","name","result","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"sources":["C:/Users/19496/FlyrProject/client/src/components/Form/Form.js"],"sourcesContent":["// this is the code for creating a \"memory\"/form on the website\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport FileBase from 'react-file-base64';\r\nimport useStyles from './styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\n// on individual posts, we need to get the current id\r\n// becuase when we press the \"...\" spread icon is the edit button\r\n// we need to pass over the id of that post to our form component\r\n// that way we can go from \"Creating a memory\" to \"Editing a memory\"\r\n// for the selected post that is identified by its id.\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n    const [postData, setPostData] = useState({\r\n        // creator/wtv: '' means it's an empty string\r\n        title: '', message: '', tags: '', selectedFile: ''});\r\n        const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n    // we run this function when the post gets updated from nothing to a post\r\n    useEffect(() => {\r\n        if (post) setPostData(post);\r\n    }, [post])\r\n\r\n// once the user press submit, we want to send a post request with all the user's data\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (currentId === 0) {\r\n        dispatch(createPost({ ...postData, name: user?.result?.name }));\r\n        clear();\r\n        } else {\r\n        dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\r\n        clear();\r\n        }\r\n    };\r\n\r\n    const clear = () => {\r\n        setCurrentId(null);\r\n        setPostData({ title: '', message: '', tags: '', selectedFile: ''});\r\n    }\r\n\r\n    if(!user?.result?.name) {\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    Please Sign In to start your experience in Flyr!!!\r\n                </Typography>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        // paper is a white background\r\n        // VALUE here means that the whole data from the poast is gonna be stored in the postData object\r\n                // and value is gonna equal to postData.creator\r\n        // onChange allows us to set each of the different textfields without overriding once another\r\n            // this means setting fields every time but the last property is changed so\r\n            // all the textfield will be fulfilled\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <Typography variant=\"h6\">{currentId ? 'Editing' : 'Creating'} a Memory</Typography>\r\n                <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })}/>\r\n                <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })}/>\r\n                <TextField name=\"tags\" variant=\"outlined\" label=\"Tags\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}/>\r\n                <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({base64}) => setPostData({ ...postData, selectedFile: base64 })} /></div>\r\n                <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\r\n            </form>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Form;"],"mappings":"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"},"metadata":{},"sourceType":"module"}